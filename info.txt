
permission listing
Create Main Module -> role: admin
Create Permission -> role: admin
default -> role:admin


//models;
  1 : variation table
  2 : contracts
  3 : Require docs



  to display error messages;
  in controller
  return back()->with(['message' => "Permission name exist", 'label' => "danger"]);
  in blade
  @if(Session::has('message'))
      <p class="alert alert-{{Session::get('label')}}">{{ Session::get('message') }}</p>
  @endif


how to create database seeder;
php artisan make:seeder tablenameTableSeeder
how to seed :php artisan db:seed --class=PermissionsTableSeeder

blad url link
{ url('/variations', $variation->id) }}

how to add days
$newDate = strtotime($myDate . '+ '.$nDays.'days');

js code to load a div and pass and get data from server
$("#selected").load("/selected/" + task_id);


              ajax parital update implementation

              // partial blade : in view/partials
              <div class="col-lg-6 collapse" >
                  <div class="job-summ-panel" id="job-summ-panel" >
                      @foreach($jobs as $job)
                          {{$job['active']}}
                      @endforeach
                  </div>
              </div>

              // controller
              public function task_link_budget(Request $request)
              {
                // $input = $request->input('job_ref');
                $generatedData = 1;
                // return View::make("partials/task_link_budget");
                return View::make("partials/task_link_budget", ["jobs" => $generatedData]);
              }

              ajax. call with error:
              $.ajax({
              method: "POST",
              url: '/task_link_budget',
              data: {
                      "_token": "{{ csrf_token() }}",
                      "id": object
              },
                success: function (response) {
                    $('.collapse').collapse('show');
                    $('#task_link_budget').html(response)
                },
                error: function (request, status, error) {
                    alert(request.responseText);
                  }
              });



    to call function in another model
    ->with('contract:id,currency as currency_id', 'contract.currency:id,xrate')


    Commit the change using

git commit -m "My message"
Stash it.

Stashing acts as a stack, where you can push changes, and you pop them in reverse order.

To stash, type

git stash
Do the merge, and then pull the stash:
git stash pop
Discard the local changes

using git reset --hard
or git checkout -t -f remote/branch

Or: Discard local changes for a specific file

using git checkout filename

return redirect()->route('route.name', [$param]);

MAIL_DRIVER=smtp
MAIL_HOST=smtp.gmail.com
MAIL_PORT=587
MAIL_USERNAME=pfms.financemv@gmail.com
MAIL_PASSWORD=samename@123
MAIL_ENCRYPTION=tls


mail: to create mail and link to mark down;
php artisan make:mail NewUserWelcome --markdown=emails.user.new_user_welcome

to generate events
php artisan event:generate

to run queue:work continiously
nohup php artisan queue:work --daemon &
